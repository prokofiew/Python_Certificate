===========================
MODULE 3 - SECTION 3.1.5
===========================


Priority 	Operator 	
1 				+, - 			unary
2 				** 	
3 				*, /, //, % 	
4 				+, - 			binary
5 				<, <=, >, >= 	
6 				==, != 	



===========================
MODULE 3 - SECTION 3.1.7
===========================
Conditions and conditional execution 


IF
This conditional statement consists of the following, strictly necessary, elements in this and this order only:

   - the if keyword;
   - one or more white spaces;
    an expression (a question or an answer) whose value will be interpreted solely in terms of True (when its value is non-zero) and False (when it is equal to zero);
   - a colon followed by a newline;
   - an indented instruction or set of instructions (at least one instruction is absolutely required); the indentation may be achieved in two ways – by inserting a particular number of spaces (the recommendation is to use four spaces of indentation), or by using the tab character; note: if there is more than one instruction in the indented part, the indentation should be the same in all lines; even though it may look the same if you use tabs mixed with spaces, it's important to make all indentations exactly the same – Python 3 does not allow the mixing of spaces and tabs for indentation.

How does that statement work?

   - If the true_or_not expression represents the truth (i.e., its value is not equal to zero), the indented statement(s) will be executed;
   - if the true_or_not expression does not represent the truth (i.e., its value is equal to zero), the indented statement(s) will be omitted (ignored), and the next executed instruction will be the one after the original indentation level.

ELSE


Thus, there is a new word: else – this is a keyword.

The part of the code which begins with else says what to do if the condition specified for the if is not met (note the colon after the word).

The if-else execution goes as follows:

   - if the condition evaluates to True (its value is not equal to zero), the perform_if_condition_true statement is executed, and the conditional statement comes to an end;
   - if the condition evaluates to False (it is equal to zero), the perform_if_condition_false statement is executed, and the conditional statement comes to an end.


   ===============
   NESTED IF ELSE
   ===============

Nested if-else statements

Now let's discuss two special cases of the conditional statement.

First, consider the case where the instruction placed after the if is another if.

Read what we have planned for this Sunday. If the weather is fine, we'll go for a walk. If we find a nice restaurant, we'll have lunch there. Otherwise, we'll eat a sandwich. If the weather is poor, we'll go to the theater. If there are no tickets, we'll go shopping in the nearest mall.

Let's write the same in Python. Consider carefully the code here:

if the_weather_is_good:
    if nice_restaurant_is_found:
        have_lunch()
    else:
        eat_a_sandwich()
else:
    if tickets_are_available:
        go_to_the_theater()
    else:
        go_shopping()

Here are two important points:

   - this use of the if statement is known as nesting; remember that every else refers to the if which lies at the same indentation level; you need to know this to determine how the ifs and elses pair up;
   - consider how the indentation improves readability, and makes the code easier to understand and trace.

   The way to assemble subsequent if-elif-else statements is sometimes called a cascade.


Some additional attention has to be paid in this case:

   - you mustn't use else without a preceding if;
    else is always the last branch of the cascade, regardless of whether you've used elif or not;
   - else is an optional part of the cascade, and may be omitted;
    if there is an else branch in the cascade, only one of all the branches is executed;
   - if there is no else branch, it's possible that none of the available branches is executed.


===============
FOR LOOP 
===============

There are some new elements. Let us tell you about them:

   - the for keyword opens the for loop; note – there's no condition after it; you don't have to think about conditions, as they're checked internally, without any intervention;
   - any variable after the for keyword is the control variable of the loop; it counts the loop's turns, and does it automatically;
   - the in keyword introduces a syntax element describing the range of possible values being assigned to the control variable;
   - the range() function (this is a very special function) is responsible for generating all the desired values of the control variable; in our example, the function will create (we can even say that it will feed the loop with) subsequent values from the following set: 0, 1, 2 .. 97, 98, 99; note: in this case, the range() function starts its job from 0 and finishes it one step (one integer number) before the value of its argument;
   - note the pass keyword inside the loop body – it does nothing at all; it's an empty instruction – we put it here because the for loop's syntax demands at least one instruction inside the body (by the way – if, elif, else and while express the same thing)


=============================================
THIS WILL HAVE NO OUTPUT - start pętli większy lub równy drugiemu

 for i in range(1, 1):
    print("The value of i is currently", i)

 for i in range(2, 1):
    print("The value of i is currently", i)
============================================


===================
CONTINUE AND BREAK
===================

So far, we've treated the body of the loop as an indivisible and inseparable sequence of instructions that are performed completely at every turn of the loop. However, as a developer, you could be faced with the following choices:

   - it appears that it's unnecessary to continue the loop as a whole; you should refrain from further execution of the loop's body and go further;
   - it appears that you need to start the next turn of the loop without completing the execution of the current turn.

These two instructions are:

   - break – exits the loop immediately, and unconditionally ends the loop's operation; the program begins to execute the nearest instruction after the loop's body;
   - continue – behaves as if the program has suddenly reached the end of the body; the next turn is started and the condition expression is tested immediately.

Both these words are keywords.


===========================
MODULE 3 - SECTION 3.2.12
===========================
The while loop and the else branch 

Both loops, while and for, have one interesting (and rarely used) feature.

We'll show you how it works – try to judge for yourself if it's usable and whether you can live without it or not.

In other words, try to convince yourself if the feature is valuable and useful, or is just syntactic sugar.

Take a look at the snippet in the editor. There's something strange at the end – the else keyword.

As you may have suspected, loops may have the else branch too, like ifs.

The loop's else branch is always executed once, regardless of whether the loop has entered its body or not.


==============================
i = 1
while i < 5:
    print(i)
    i += 1
else:
    print("else:", i)


OUTPUT:
1
2
3
4
else: 5

==============================

i = 5
while i < 5:
    print(i)
    i += 1
else:
    print("else:", i)

OUTPUT:
else: 5

==============================

for i in range(5):
    print(i)
else:
    print("else:", i)

OUTPUT:
0
1
2
3
4
else: 4

==============================

i = 111
for i in range(2, 1):
    print(i)
else:
    print("else:", i)

OUTPUT:
else: 111


IMPORTANT:
The loop's body won't be executed here at all. Note: we've assigned the i variable before the loop.

Run the program and check its output.

When the loop's body isn't executed, the control variable retains the value it had before the loop.

Note: if the control variable doesn't exist before the loop starts, it won't exist when the execution reaches the else branch.


==========================
    SUMMARY
==========================



1. There are two types of loops in Python: while and for:

   - the while loop executes a statement or a set of statements as long as a specified boolean condition is true, e.g.:

# Example 1
while True:
    print("Stuck in an infinite loop.")
 
# Example 2
counter = 5
while counter > 2:
    print(counter)
    counter -= 1
 

   - the for loop executes a set of statements many times; it's used to iterate over a sequence (e.g., a list, a dictionary, a tuple, or a set – you will learn about them soon) or other iterable objects (e.g., strings). You can use the for loop to iterate over a sequence of numbers using the built-in range function. Look at the examples below:

# Example 1
word = "Python"
for letter in word:
    print(letter, end="*")
 
# Example 2
for i in range(1, 10):
    if i % 2 == 0:
        print(i)
 

2. You can use the break and continue statements to change the flow of a loop:

   - You use break to exit a loop, e.g.:

text = "OpenEDG Python Institute"
for letter in text:
    if letter == "P":
        break
    print(letter, end="")
 

   - You use continue to skip the current iteration, and continue with the next iteration, e.g.:

text = "pyxpyxpyx
for letter in text:
    if letter == "x":
        continue
    print(letter, end="")
 

3. The while and for loops can also have an else clause in Python. The else clause executes after the loop finishes its execution as long as it has not been terminated by break, e.g.:

n = 0
 
while n != 3:
    print(n)
    n += 1
else:
    print(n, "else")
 
print()
 
for i in range(0, 3):
    print(i)
else:
    print(i, "else")
 

4. The range() function generates a sequence of numbers. It accepts integers and returns range objects. The syntax of range() looks as follows: range(start, stop, step), where:

  - start is an optional parameter specifying the starting number of the sequence (0 by default)
  - stop is an optional parameter specifying the end of the sequence generated (it is not included),
  -  and step is an optional parameter specifying the difference between the numbers in the sequence (1 by default.)

Example code:

for i in range(3):
    print(i, end=" ")  # Outputs: 0 1 2
 
for i in range(6, 1, -2):
    print(i, end=" ")  # Outputs: 6, 4, 2


 
=========================
Logic and bit operations
=========================

One logical conjunction operator in Python is the word and. It's a binary operator with a priority that is lower than the one expressed by the comparison operators. It allows us to code complex conditions without the use of parentheses like this one:

counter > 0 and value == 100
 

The result provided by the and operator can be determined on the basis of the truth table.

If we consider the conjunction of A and B, the set of possible values of arguments and corresponding values of the conjunction looks as follows:

Argument A  Argument B    A and B
False       False          False
False       True           False
True        False          False
True        True           True

The or operator

A disjunction operator is the word or. It's a binary operator with a lower priority than and (just like + compared to *). Its truth table is as follows:

Argument A  Argument B  A or B
False       False       False
False       True        True
True        False       True
True        True        True

The not operator

In addition, there's another operator that can be applied to the construction of conditions. It's a unary operator performing a logical negation. Its operation is simple: it turns truth into falsehood and falsehood into truth.

This operator is written as the word not, and its priority is very high: the same as the unary + and -. Its truth table is simple:

Argument    not Argument
False       True
True        False


# Example 1:
var = 1
print(var > 0)
print(not (var <= 0))

# Example 2:
print(var != 0)
print(not (var == 0))

__comment__ = """
You may be familiar with De Morgan's laws. 
They say that:

The negation of a conjunction 
is the disjunction of the negations.

The negation of a disjunction is 
the conjunction of the negations.

Let's write the same thing using Python:

not (p and q) == (not p) or (not q)
not (p or q) == (not p) and (not q)

Note how the parentheses have been used to code the expressions ‒ 
we put them there to improve readability.

We should add that none of these two - 
argument operators can be used in the abbreviated form known as op =.
This exception is worth remembering.
"""

===
Logical operators take their arguments as a whole regardless of how many bits they contain. The operators are aware only of the value: zero (when all the bits are reset) means False; not zero (when at least one bit is set) means True.

The result of their operations is one of these values: False or True. This means that this snippet will assign the value True to the j variable if i is not zero; otherwise, it will be False.

i = 1
j = not not i

OUTPUT:
True

================================
Bitwise operators 3.3.4
===============================

 
However, there are four operators that allow you to manipulate single bits of data. They are called bitwise operators.

They cover all the operations we mentioned before in the logical context, and one additional operator. This is the xor (as in exclusive or) operator, and is denoted as ^ (caret).

Here are all of them:

    & (ampersand) ‒ bitwise conjunction;
    | (bar) ‒ bitwise disjunction;
    ~ (tilde) ‒ bitwise negation;
    ^ (caret) ‒ bitwise exclusive or (xor).


Bitwise operations (&, |, and ^) Argument A     Argument B  A & B    A | B  A ^ B
                                    0               0         0        0      0
                                    0               1         0        1      1
                                    1               0         0        1      1
                                    1               1         1        1      0

Bitwise operations (~) Argument     ~ Argument
                          0              1
                          1              0

Let's make it easier:

    & requires exactly two 1s to provide 1 as the result;
    | requires at least one 1 to provide 1 as the result;
    ^ requires exactly one 1 to provide 1 as the result.

Let us add an important remark: the arguments of these operators must be integers; we must not use floats here.

The difference in the operation of the logical and bit operators is important: the logical operators do not penetrate into the bit level of its argument. They're only interested in the final integer value.



===============================================
Binary left shift and binary right shift 3.3.6
===============================================
 

Python offers yet another operation relating to single bits: shifting. This is applied only to integer values, and you mustn't use floats as arguments for it.

You already apply this operation very often and quite unconsciously. How do you multiply any number by ten? Take a look:

12345 × 10 = 123450

As you can see, multiplying by ten is in fact a shift of all the digits to the left and filling the resulting gap with zero.

Division by ten? Take a look:

12340 ÷ 10 = 1234

Dividing by ten is nothing but shifting the digits to the right.

The same kind of operation is performed by the computer, but with one difference: as two is the base for binary numbers (not 10), shifting a value one bit to the left thus corresponds to multiplying it by two; respectively, shifting one bit to the right is like dividing by two (notice that the rightmost bit is lost).

The shift operators in Python are a pair of digraphs: << and >>, clearly suggesting in which direction the shift will act.

value << bits
value >> bits
 

The left argument of these operators is an integer value whose bits are shifted. The right argument determines the size of the shift.

It shows that this operation is certainly not commutative.

The priority of these operators is very high. You'll see them in the updated table of priorities, which we'll show you at the end of this section.


Priority    Operator    
    1           ~, +, -                                         unary
    2           **  
    3           *, /, //, %     
    4           +, -                                            binary
    5           <<, >>  
    6           <, <=, >, >=    
    7           ==, !=  
    8           &   
    9           |   
    10          =, +=, -=, *=, /=, %=, &=, ^=, |=, >>=, <<=


===========================
SUMMARY
===========================
3.3.7 SECTION SUMMARY

1. Python supports the following logical operators:

   - and → if both operands are true, the condition is true, e.g., (True and True) is True,
   - or → if any of the operands are true, the condition is true, e.g., (True or False) is True,
   - not → returns false if the result is true, and returns true if the result is false, e.g., not True is False.

2. You can use bitwise operators to manipulate single bits of data. The following sample data:

   - x = 15, which is 0000 1111 in binary,
   - y = 16, which is 0001 0000 in binary.

will be used to illustrate the meaning of bitwise operators in Python. Analyze the examples below:

   - & does a bitwise and, e.g., x & y = 0, which is 0000 0000 in binary,
   - | does a bitwise or, e.g., x | y = 31, which is 0001 1111 in binary,
   - ˜ does a bitwise not, e.g., ˜ x = 240*, which is 1111 0000 in binary,
   - ^ does a bitwise xor, e.g., x ^ y = 31, which is 0001 1111 in binary,
   - >> does a bitwise right shift, e.g., y >> 1 = 8, which is 0000 1000 in binary,
   - << does a bitwise left shift, e.g., y << 3 = 128, which is 1000 0000 in binary.

* -16 (decimal from signed 2's complement) -- read more about the Two's complement operation.
