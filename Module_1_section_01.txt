============
MODULE 1 SECTION 1.1
============

MACHINE LANGUAGE - Computers have their own language, too, called machine language, which is very rudimentary.


IL, INSTRUCTION LIST - A complete set of known commands is called an instruction list, sometimes abbreviated to IL

NATURAL LANGUAGE - Moreover, they are still evolving, and new words are created every day as old words disappear. These languages are called natural languages

ALPHABET - a set of symbols used to build words of a certain language (e.g., the Latin alphabet for English, the Cyrillic alphabet for Russian, Kanji for Japanese, and so on)

LEXIS - (aka a dictionary) a set of words the language offers its users (e.g., the word "computer" comes from the English language dictionary, while "cmoptrue" doesn't; the word "chat" is present both in English and French dictionaries, but their meanings are different)

SEMANTICS - a set of rules determining if a certain phrase makes sense (e.g., "I ate a doughnut" makes sense, but "A doughnut ate me" doesn't)

SYNTAX - a set of rules (formal or informal, written or felt intuitively) used to determine if a certain string of words forms a valid sentence (e.g., "I am a python" is a syntactically correct phrase, while "I a python am" isn't)

The IL is, in fact, the alphabet of a machine language. 

SOURCE CODE - A program written in a high-level programming language is called a source code

SOURCE FILE - Similarly, the file containing the source code is called the source file.



COMPILATION VS INTERPRETATION
There are two different ways of transforming a program from a high-level programming language into machine language:
- COMPILATION - 
Compilation – the source program is translated once (however, this act must be repeated each time you modify the source code) by getting a file (e.g., an .exe file if the code is intended to be run under MS Windows) containing the machine code. Now you can distribute the file worldwide; the program that performs this translation is called a compiler or translator.

- INTERPRETATION
Interpretation – you (or any user of the code) can translate the source program each time it has to be run. The program performing this kind of transformation is called an interpreter, as it interprets the code every time it is intended to be executed. It also means that you cannot just distribute the source code as-is, because the end-user also needs the interpreter to execute it

Of course, such a composition has to be correct in many senses:

    alphabetically – a program needs to be written in a recognizable script, such as Roman, Cyrillic, etc.
    lexically – each programming language has its dictionary and you need to master it; thankfully, it's much simpler and smaller than the dictionary of any natural language;
    syntactically – each language has its rules and they must be obeyed;
    semantically – the program has to make sense.

PYTHON IS INTERPRETED LANGUAGE This means that it inherits all the described advantages and disadvantages. Of course, it adds some of its unique features to both sets.
If you want to program in Python, you'll need the Python interpreter. You won't be able to run your code without it. Fortunately, Python is free. This is one of its most important advantages.

Due to historical reasons, languages designed to be utilized in the interpretation manner are often called scripting languages, while the source programs encoded using them are called scripts. Okay, let's meet Python.


============
MODULE 1 SECTION 1.2
============
HISTORY

Python is a widely-used, interpreted, object-oriented, and high-level programming language with dynamic semantics, used for general-purpose programming.

There are not many languages whose authors are known by name. Python was created by Guido van Rossum, born in 1956 in Haarlem, the Netherlands.

In 1999, Guido van Rossum defined his goals for Python:

    an easy and intuitive language just as powerful as those of the major competitors;
    open source, so anyone can contribute to its development;
    code that is as understandable as plain English;
    suitable for everyday tasks, allowing for short development times.


WHY PYTHON:


   - it's easy to learn – the time needed to learn Python is shorter than for many other languages; this means that it's possible to start the actual programming faster;
   - it's easy to teach – the teaching workload is smaller than that needed by other languages; this means that the teacher can put more emphasis on general (language-independent) programming techniques, not wasting energy on exotic tricks, strange exceptions and incomprehensible rules;
   - it's easy to use for writing new software – it's often possible to write code faster when using Python;
   - it's easy to understand - it's also often easier to understand someone else's code faster if it is written in Python;
   - it's easy to obtain, install and deploy – Python is free, open and multiplatform; not all languages can boast that.


Python has two direct competitors, with comparable properties and predispositions. These are:

    Perl – a scripting language originally authored by Larry Wall;
    Ruby – a scripting language originally authored by Yukihiro Matsumoto.


=================
MODULE 1 - SECTION 1.3
=================

To start your work, you need the following tools:

    an editor which will support you in writing the code (it should have some special features, not available in simple tools); this dedicated editor will give you more than the standard OS equipment;
    a console in which you can launch your newly written code and stop it forcibly when it gets out of control;
    a tool named a debugger, able to launch your code step-by-step, which will allow you to inspect it at each moment of execution.



The message (in red) shows (in the subsequent lines):

    the traceback (which is the path that the code traverses through different parts of the program – you can ignore it for now, as it is empty in such a simple code);
    the location of the error (the name of the file containing the error, line number and module name); note: the number may be misleading, as Python usually shows the place where it first notices the effects of the error, not necessarily the error itself;
    the content of the erroneous line; note: IDLE’s editor window doesn’t show line numbers, but it displays the current cursor location at the bottom-right corner; use it to locate the erroneous line in a long source code;
    the name of the error and a short explanation.
